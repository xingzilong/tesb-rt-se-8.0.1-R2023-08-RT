###
# #%L
# TESB :: Assembly
# %%
# Copyright (c) 2006-2021 Talend Inc. - www.talend.com
# %%
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# #L%
###
#
# Respect individual bundle start level during feature startup
#
respectStartLvlDuringFeatureStartup=true

#
# Comma separated list of features repositories to register by default
#
featuresRepositories = \
    mvn:org.apache.karaf.features/framework/${framework.features.tesb.version}/xml/features, \
    mvn:org.apache.karaf.features/standard/${standard.features.tesb.version}/xml/features, \
    mvn:org.apache.karaf.features/spring/${spring.features.tesb.version}/xml/features, \
    mvn:org.apache.karaf.features/enterprise/${enterprise.features.tesb.version}/xml/features, \
    mvn:org.apache.activemq/activemq-karaf/${activemq.features.tesb.version}/xml/features-core, \
    mvn:org.apache.activemq/activemq-karaf/${activemq.features.tesb.version}/xml/features, \
    mvn:org.apache.camel.karaf/apache-camel/${camel.features.tesb.version}/xml/features, \
    mvn:org.apache.cxf.karaf/apache-cxf/${cxf.features.tesb.version}/xml/features, \
    mvn:org.talend.esb/features/${project.version}/xml, \
    mvn:org.talend.esb.auxiliary.storage/auxiliary-storage-features/${project.version}/xml, \
    mvn:org.apache.karaf.decanter/apache-karaf-decanter/${decanter.features.tesb.version}/xml/features, \
    mvn:org.ops4j.pax.web/pax-web-features/${pax-web.features.tesb.version}/xml/features, \
    mvn:org.hibernate.validator/hibernate-validator-osgi-karaf-features/${hibernate-validator.features.tesb.version}/xml/features, \
    mvn:org.ops4j.pax.jdbc/pax-jdbc-features/${pax-jdbc-features.features.tesb.version}/xml/features, \
    mvn:org.ops4j.pax.jms/pax-jms-features/${pax-jms-features.features.tesb.version}/xml/features, \
    mvn:org.ops4j.pax.transx/pax-transx-features/${pax-transx-features.tesb.version}/xml/features, \
    mvn:org.apache.aries.jpa/jpa-features/${jpa-features.features.tesb.version}/xml/features, \
    mvn:org.apache.openjpa/openjpa-features/${openjpa-features.features.tesb.version}/xml/features

#
# Comma separated list of features to install at startup
#
featuresBoot = \
    (instance, \
    package, \
    log, \
    ssh, \
    aries-blueprint, \
    aries-blueprint-spring, \
    framework, \
    system, \
    feature, \
    talend-common-optionals, \
    talend-common-dependencies, \
    spring, \
    shell, \
    management, \
    service, \
    jaas, \
    shell-compat, \
    deployer, \
    diagnostic, \
    wrap, \
    bundle, \
    config, \
    kar, \
    webconsole, \
    eventadmin, \
    camel-http, \
    camel-xstream, \
    camel-groovy, \
    cxf-abdera, \
    cxf-tools, \
    cxf, \
    cxf-jackson, \
    cxf-commands), \
    activemq-client, \
    camel, \
    camel-cxf, \
    camel-jms, \
    camel-ssh, \
    tesb-sam-agent, \
    tesb-locator-client, \
    talend-job-controller, \
    camel-ftp, \
    camel-talendjob, \
    request-callback, \
    tesb-aux-client-rest, \
    tesb-derby-starter, \
    tesb-datasource-derby, \
    tesb-sam-service-soap, \
    tesb-sam-service-rest

#
# Resource repositories (OBR) that the features resolver can use
# to resolve requirements/capabilities
#
# The format of the resourceRepositories is
# resourceRepositories=[xml:url|json:url],...
# for Instance:
#
#resourceRepositories=xml:http://host/path/to/index.xml
# or
#resourceRepositories=json:http://host/path/to/index.json
#

#
# Defines if the boot features are started in asynchronous mode (in a dedicated thread)
#
featuresBootAsynchronous=false

#
# Service requirements enforcement
#
# By default, the feature resolver checks the service requirements/capabilities of
# bundles for new features (xml schema >= 1.3.0) in order to automatically installs
# the required bundles.
# The following flag can have those values:
#   - disable: service requirements are completely ignored
#   - default: service requirements are ignored for old features
#   - enforce: service requirements are always verified
#
#serviceRequirements=default

#
# Store cfg file for config element in feature
#
configCfgStore=false

#
# Define if the feature service automatically refresh bundles
#
autoRefresh=true

#
# Configuration of features processing mechanism (overrides, blacklisting, modification of features)
# XML file defines instructions related to features processing
# versions.properties may declare properties to resolve placeholders in XML file
# both files are relative to ${karaf.etc}
#
#featureProcessing=org.apache.karaf.features.xml
#featureProcessingVersions=versions.properties
